@using System.Web.Optimization
@using StockExchange.Web.Models
@*TODO: CHANGE MODEL! Include StrategyName, SelectedIndicatorIds list and easy-to-map indicator properties list/dictionary*@
@model StrategyViewModel

@{
    ViewBag.Title = "Strategy";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-4 col-centered">
            <div class="box box-info">
                <div class="box-header with-border">
                    <h3 class="box-title">Define your strategy</h3>
                </div>
                <div class="box-body col-sm-10 col-centered">
                    @*TODO: make this form useful*@
                    @*TODO: use LabelFor and TextBoxFor*@
                    @*TODO: remove magic CSS classes and replace them with data tags*@
                    @*TODO: implement removing added indicators*@

                    @*Commented to aviod double sent post - from both form and javascript.*@
                    @*@using (Html.BeginForm("CreateStrategy", "Strategies", null, FormMethod.Post, new {@class = "form-horizontal"}))*@
                    @*{*@
                        <div class="form-group property">
                            <label class="col-sm-4 control-label">Strategy Name: </label>
                            <div class="col-sm-8 input-group">
                                @Html.TextBox("strname", "", new {@class = "strategyname form-control"})
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label">Add indicators: </label>
                            @Html.DropDownList("Indicators", new SelectList(Model.Indicators, nameof(IndicatorViewModel.Type), nameof(IndicatorViewModel.Name)), " --- ", new {@class = "form-control indicator-select"})
                        </div>
                        @foreach (var indicator in Model.Indicators)
                        {
                            <fieldset id="@indicator.Type" class="@indicator.Type hidden indicator form-group">
                                <legend class="col-sm-12">@indicator.Name<i class="fa fa-trash fa-pull-right"></i></legend>
                                @foreach (var property in Model.Properties.Where(item => item.Value.Type == indicator.Type))
                                {
                                    <div class="property form-group">
                                        <label class="col-sm-4 control-label propertyname">@property.Key.Name</label>
                                        <div class="input-group col-sm-8">
                                            @Html.TextBox(property.Key.Value.ToString(), property.Key.Value.ToString(), new {@class = property.Key.Name + " form-control"})
                                        </div>
                                    </div>
                                }
                            </fieldset>
                        }
                        <div class="form-group">
                            <button class="btn btn-success pull-right create" type="submit">Create</button>
                        </div>
                    @*}*@
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/Scripts/Views/strategyView.js")
}
